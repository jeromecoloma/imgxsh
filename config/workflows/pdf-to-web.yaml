# PDF to Web Gallery Workflow
# Renders PDF pages as images and optimizes them for web display

name: pdf-to-web
description: "Render PDF pages as images and optimize for web gallery"
version: "1.0"

settings:
  output_dir: "./output"
  temp_dir: "/tmp/imgxsh/pdf-web"
  parallel_jobs: 4

steps:
  - name: extract_pages
    type: pdf_extract
    description: "Render PDF pages as images"
    params:
      input: "{workflow_input}"
      output_dir: "{temp_dir}/extracted"
      format: "png"
      quality: 85
      
  - name: create_thumbnails
    type: resize
    description: "Create thumbnail versions"
    condition: "extracted_count > 0"
    params:
      input_dir: "{temp_dir}/extracted"
      width: 300
      height: 200
      maintain_aspect: true
      quality: 80
      output_template: "{output_dir}/thumbnails/{pdf_name}_thumb_{counter:03d}.jpg"
      
  - name: create_full_size
    type: convert
    description: "Create full-size web-optimized versions"
    condition: "extracted_count > 0"
    params:
      input_dir: "{temp_dir}/extracted"
      format: "webp"
      quality: 85
      max_width: 1200
      max_height: 800
      output_template: "{output_dir}/full/{pdf_name}_full_{counter:03d}.{format}"
      
  - name: generate_gallery_html
    type: custom
    description: "Generate HTML gallery page"
    condition: "extracted_count > 0"
    params:
      script: |
        #!/bin/bash
        # Generate simple HTML gallery
        output_dir="./output"
        html_file="$output_dir/gallery.html"
        
        echo "Creating gallery at $html_file"
        
        # Create the HTML gallery
        cat > "$html_file" << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>PDF Gallery</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
                .gallery { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 20px; }
                .gallery-item { background: white; border-radius: 8px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .gallery-item img { width: 100%; height: auto; border-radius: 4px; cursor: pointer; }
                .gallery-item h3 { margin: 10px 0 5px 0; color: #333; }
                .gallery-item p { margin: 0; color: #666; font-size: 14px; }
                .modal { display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.9); }
                .modal-content { margin: auto; display: block; max-width: 90%; max-height: 90%; }
                .close { position: absolute; top: 15px; right: 35px; color: #f1f1f1; font-size: 40px; font-weight: bold; cursor: pointer; }
            </style>
        </head>
        <body>
            <h1>PDF Gallery</h1>
            <div class="gallery">
        EOF
        
        # Add thumbnail entries
        counter=1
        for thumb in "$output_dir/thumbnails"/*.jpg; do
            if [[ -f "$thumb" ]]; then
                thumb_name=$(basename "$thumb")
                full_name="${thumb_name/_thumb_/_full_}"
                full_name="${full_name/.jpg/.webp}"
                full_path="$output_dir/full/$full_name"
                
                if [[ -f "$full_path" ]]; then
                    echo "                <div class=\"gallery-item\">" >> "$html_file"
                    echo "                    <img src=\"thumbnails/$thumb_name\" onclick=\"openModal('full/$full_name')\" alt=\"Page $counter\">" >> "$html_file"
                    echo "                    <h3>Page $counter</h3>" >> "$html_file"
                    echo "                    <p>Click to view full size</p>" >> "$html_file"
                    echo "                </div>" >> "$html_file"
                    ((counter++))
                fi
            fi
        done
        
        # Close the HTML
        cat >> "$html_file" << 'EOF'
            </div>
            
            <div id="modal" class="modal">
                <span class="close" onclick="closeModal()">&times;</span>
                <img class="modal-content" id="modalImg">
            </div>
            
            <script>
                function openModal(src) {
                    const modal = document.getElementById('modal');
                    const modalImg = document.getElementById('modalImg');
                    modal.style.display = 'block';
                    modalImg.src = src;
                }
                
                function closeModal() {
                    document.getElementById('modal').style.display = 'none';
                }
                
                // Close modal when clicking outside the image
                window.onclick = function(event) {
                    const modal = document.getElementById('modal');
                    if (event.target == modal) {
                        modal.style.display = 'none';
                    }
                }
            </script>
        </body>
        </html>
        EOF
        
        echo "Gallery created successfully at $html_file"

hooks:
  pre_workflow:
    - 'echo "Starting PDF page rendering for: {workflow_input}"'
  
  on_success:
    - 'echo "PDF pages rendered successfully"'
    - 'echo "Thumbnails and full-size images created in: {output_dir}"'
  
  on_failure:
    - 'echo "Workflow failed at step: {failed_step}"'

# Template variables available:
# {workflow_input} - Input file/directory path
# {pdf_name} - Base name of PDF file without extension  
# {output_dir} - Configured output directory
# {temp_dir} - Temporary working directory
# {timestamp} - Current timestamp (YYYYMMDD_HHMMSS)
# {counter:03d} - Sequential counter with zero padding
# {step_name} - Current step name
# {extracted_count} - Number of images extracted from PDF
