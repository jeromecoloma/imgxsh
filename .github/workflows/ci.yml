name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  shellcheck:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Install shellcheck (static binary)
      run: |
        set -euo pipefail
        SC_VER="v0.11.0"
        SC_TAR="shellcheck-${SC_VER}.linux.x86_64.tar.xz"
        SC_URL="https://github.com/koalaman/shellcheck/releases/download/${SC_VER}/${SC_TAR}"
        curl -sSL "$SC_URL" -o /tmp/${SC_TAR}
        tar -xJf /tmp/${SC_TAR} -C /tmp
        sudo install "/tmp/shellcheck-${SC_VER}/shellcheck" /usr/local/bin/shellcheck
        shellcheck --version
        
    - name: Run shellcheck
      run: |
        if ls lib/*.sh 1> /dev/null 2>&1; then shellcheck lib/*.sh; fi
        if ls bin/* 1> /dev/null 2>&1; then shellcheck bin/*; fi
        if ls demo/* 1> /dev/null 2>&1; then shellcheck demo/*; fi
        if ls scripts/*.sh 1> /dev/null 2>&1; then shellcheck scripts/*.sh; fi
        if [ -f install.sh ]; then shellcheck install.sh; fi
        if [ -f uninstall.sh ]; then shellcheck uninstall.sh; fi

  shfmt:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Install shfmt
      run: |
        sudo curl -L -o /usr/local/bin/shfmt https://github.com/mvdan/sh/releases/download/v3.12.0/shfmt_v3.12.0_linux_amd64
        sudo chmod +x /usr/local/bin/shfmt
        
    - name: Run shfmt
      run: |
        if ls lib/*.sh 1> /dev/null 2>&1; then shfmt -d lib/*.sh; fi
        if ls bin/* 1> /dev/null 2>&1; then shfmt -d bin/*; fi
        if ls demo/* 1> /dev/null 2>&1; then shfmt -d demo/*; fi
        if ls scripts/*.sh 1> /dev/null 2>&1; then shfmt -d scripts/*.sh; fi
        if [ -f install.sh ]; then shfmt -d install.sh; fi
        if [ -f uninstall.sh ]; then shfmt -d uninstall.sh; fi

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Don't fetch submodules initially - let the test script handle setup
        submodules: false
        
    - name: Configure Git for submodules
      run: |
        git config --global user.email "ci@github.com"
        git config --global user.name "GitHub CI"

    - name: Install system dependencies
      run: |
        # Handle potential GPG signature issues in containerized environments
        set -euo pipefail
        
        # Try standard update first, fallback to --allow-unauthenticated if needed
        if ! sudo apt-get update; then
          echo "Standard apt update failed, trying with --allow-unauthenticated..."
          sudo apt-get update --allow-unauthenticated || true
        fi
        
        # Install dependencies with proper error handling
        sudo apt-get install -y imagemagick poppler-utils unzip curl || {
          echo "Package installation failed, trying alternative approach..."
          sudo apt-get install -y --allow-unauthenticated imagemagick poppler-utils unzip curl || {
            echo "Alternative package installation failed, checking what's available..."
            # At minimum, try to get imagemagick which is essential
            sudo apt-get install -y --force-yes imagemagick 2>/dev/null || {
              echo "Critical: Could not install imagemagick. Attempting manual installation..."
              # Try to install from a different source or use pre-installed version
              which convert || which magick || {
                echo "ERROR: No ImageMagick installation found and cannot install"
                exit 1
              }
            }
          }
        }
        
        # Verify critical dependencies
        echo "Verifying installations..."
        which convert || which magick || { echo "ImageMagick not found"; exit 1; }
        echo "Dependencies verified successfully"

    - name: Set up consistent test environment
      run: |
        # Use our comprehensive CI environment setup script
        if [ -f "tests/setup-ci-environment.sh" ]; then
          source tests/setup-ci-environment.sh
        else
          echo "Warning: CI environment setup script not found, using basic setup"
          export CI=true
          export SHELL_STARTER_CI_MODE=true
          export TERM=xterm-256color
        fi

    - name: Run Bats tests
      run: |
        if [ -d tests ] && ls tests/*.bats 1> /dev/null 2>&1; then
          ./tests/run-tests-ci.sh
        else
          echo "No tests directory or test files found. Skipping tests."
        fi
